apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: python-template
  title: Python flask template
  description: Provisions a minimalistic flask application
spec:
  owner: development
  type: service

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Fill in some steps
      required:
        - component_id
        - environment
      properties:
        component_id:
          title: Component name
          type: string
          description: Unique name of the component
          pattern: '^([a-zA-Z][a-zA-Z0-9-]*)(-[a-zA-Z0-9]+)*$'
        environment:
          title: Environment
          type: string
          description: The environment the component will be deployed to
          enum:
            - dev
            - qa            
            - prod
    - title: Choose a Location
      required:
        - host
        - owner
        - repo
      properties:
        host:
          title: Git Host
          type: string
          default: github.com
          enum:
              - github.com
        owner:
          title: Owner Name
          type: string
          description: Name of the user or organization that will own the repository
        repo:
          title: Repository Name
          type: string
          description: Name of the repository to be created


  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetchBase
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          app_name: ${{ parameters.component_id }}
          app_env: ${{ parameters.environment }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?owner=${{ parameters.owner }}&repo=${{ parameters.repo }}
        defaultBranch: 'main'
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # some outputs which are saved along with the job for use in the frontend
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}